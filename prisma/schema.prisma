generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/plataforma_cursos_online/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  VIDEO
  PDF
  TEXT
  DOCUMENT
  EXTERNAL_LINK
  QUIZ
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            UserRole       @default(STUDENT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  accounts        Account[]
  sessions        Session[]
  coursesCreated  Course[]       @relation("CourseInstructor")
  enrollments     Enrollment[]
  progress        Progress[]
  quizResults     QuizResult[]
  certificates    Certificate[]
  submissions     Submission[]
  comments        Comment[]
  notifications   Notification[]
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String        @db.Text
  thumbnail    String?
  instructorId String
  isPublished  Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  instructor   User          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules      Module[]
  lessons      Lesson[]
  enrollments  Enrollment[]
  certificates Certificate[]
  assignments  Assignment[]
  
  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  courseId    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@index([courseId])
  @@unique([courseId, order])
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  content     String?     @db.Text
  type        LessonType
  videoUrl    String?
  pdfUrl      String?
  externalUrl String?
  courseId    String
  moduleId    String?
  order       Int
  duration    Int?        // Duration in minutes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module?     @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  quizzes     Quiz[]
  progress    Progress[]
  assignments Assignment[]
  
  @@index([courseId])
  @@index([moduleId])
  @@unique([courseId, order])
}

model Quiz {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  lessonId    String
  timeLimit   Int?         // Time limit in minutes (null = no limit)
  maxAttempts Int?         // Maximum attempts allowed (null = unlimited)
  passingScore Int         @default(70) // Percentage needed to pass
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  results     QuizResult[]
  
  @@index([lessonId])
}

model Question {
  id            String   @id @default(cuid())
  text          String   @db.Text
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctOption String   // A, B, C, or D
  quizId        String
  order         Int
  createdAt     DateTime @default(now())
  
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([quizId])
  @@unique([quizId, order])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Int      // Percentage score (0-100)
  answers     Json     // Store user answers as JSON
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([quizId])
}

model Certificate {
  id              String   @id @default(cuid())
  certificateCode String   @unique
  userId          String
  courseId        String
  issuedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([certificateCode])
}

enum AssignmentType {
  HOMEWORK
  EXAM
  PROJECT
  ESSAY
  MULTIPLE_CHOICE
}

model Assignment {
  id            String         @id @default(cuid())
  title         String
  description   String         @db.Text
  type          AssignmentType @default(HOMEWORK)
  courseId      String
  lessonId      String?
  maxScore      Int            @default(100)
  dueDate       DateTime?
  isAutoGraded  Boolean        @default(false)
  questionsData Json?          // Para preguntas de opción múltiple
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson        Lesson?        @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  submissions   Submission[]
  rubrics       Rubric[]
  
  @@index([courseId])
  @@index([lessonId])
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

model Submission {
  id                 String           @id @default(cuid())
  assignmentId       String
  userId             String
  content            String?          @db.Text
  cloud_storage_path String?          // S3 key para archivos adjuntos
  answersData        Json?            // Para respuestas de opción múltiple
  status             SubmissionStatus @default(PENDING)
  score              Int?
  feedback           String?          @db.Text
  submittedAt        DateTime?
  gradedAt           DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  assignment         Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments           Comment[]
  
  @@unique([assignmentId, userId])
  @@index([assignmentId])
  @@index([userId])
  @@index([status])
}

model Rubric {
  id           String   @id @default(cuid())
  assignmentId String
  criteriaData Json     // Array de criterios con nombre, descripción, puntos
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@index([assignmentId])
}

model Comment {
  id           String   @id @default(cuid())
  submissionId String
  userId       String
  content      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([submissionId])
  @@index([userId])
}

enum NotificationType {
  ASSIGNMENT_CREATED
  SUBMISSION_GRADED
  COMMENT_ADDED
  COURSE_COMPLETED
  NEW_ENROLLMENT
  QUIZ_GRADED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  relatedId String?          // ID del curso, assignment, etc.
  link      String?          // URL a donde redirigir
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
