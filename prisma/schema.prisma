generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/plataforma_cursos_online/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  VIDEO
  PDF
  TEXT
  DOCUMENT
  EXTERNAL_LINK
  QUIZ
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                     @id @default(cuid())
  name                    String?
  email                   String                     @unique
  password                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole                   @default(STUDENT)
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  
  accounts                Account[]
  sessions                Session[]
  coursesCreated          Course[]                   @relation("CourseInstructor")
  enrollments             Enrollment[]
  progress                Progress[]
  quizResults             QuizResult[]
  certificates            Certificate[]
  submissions             Submission[]
  comments                Comment[]
  notifications           Notification[]
  learningPathsCreated    LearningPath[]             @relation("LearningPathInstructor")
  learningPathEnrollments LearningPathEnrollment[]
  learningPathCertificates LearningPathCertificate[]
  forumThreads            ForumThread[]
  forumReplies            ForumReply[]
  forumVotes              ForumVote[]
}

model Course {
  id           String               @id @default(cuid())
  title        String
  description  String               @db.Text
  thumbnail    String?
  instructorId String
  status       CourseStatus         @default(DRAFT)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  publishedAt  DateTime?
  
  instructor       User                 @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules          Module[]
  lessons          Lesson[]
  enrollments      Enrollment[]
  certificates     Certificate[]
  assignments      Assignment[]
  learningPathCourses LearningPathCourse[]
  forumThreads     ForumThread[]
  
  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  courseId    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons      Lesson[]
  forumThreads ForumThread[]
  
  @@index([courseId])
  @@unique([courseId, order])
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  content     String?     @db.Text
  type        LessonType
  videoUrl    String?
  pdfUrl      String?
  externalUrl String?
  courseId    String
  moduleId    String?
  order       Int
  duration    Int?        // Duration in minutes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module       Module?       @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  quizzes      Quiz[]
  progress     Progress[]
  assignments  Assignment[]
  forumThreads ForumThread[]
  
  @@index([courseId])
  @@index([moduleId])
  @@unique([courseId, order])
}

model Quiz {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  lessonId    String
  timeLimit   Int?         // Time limit in minutes (null = no limit)
  maxAttempts Int?         // Maximum attempts allowed (null = unlimited)
  passingScore Int         @default(70) // Percentage needed to pass
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  results     QuizResult[]
  
  @@index([lessonId])
}

model Question {
  id            String   @id @default(cuid())
  text          String   @db.Text
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctOption String   // A, B, C, or D
  quizId        String
  order         Int
  createdAt     DateTime @default(now())
  
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([quizId])
  @@unique([quizId, order])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Int      // Percentage score (0-100)
  answers     Json     // Store user answers as JSON
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([quizId])
}

model Certificate {
  id              String   @id @default(cuid())
  certificateCode String   @unique
  userId          String
  courseId        String
  issuedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([certificateCode])
}

enum AssignmentType {
  HOMEWORK
  EXAM
  PROJECT
  ESSAY
  MULTIPLE_CHOICE
}

model Assignment {
  id            String         @id @default(cuid())
  title         String
  description   String         @db.Text
  type          AssignmentType @default(HOMEWORK)
  courseId      String
  lessonId      String?
  maxScore      Int            @default(100)
  dueDate       DateTime?
  isAutoGraded  Boolean        @default(false)
  questionsData Json?          // Para preguntas de opción múltiple
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson        Lesson?        @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  submissions   Submission[]
  rubrics       Rubric[]
  
  @@index([courseId])
  @@index([lessonId])
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

model Submission {
  id                 String           @id @default(cuid())
  assignmentId       String
  userId             String
  content            String?          @db.Text
  cloud_storage_path String?          // S3 key para archivos adjuntos
  answersData        Json?            // Para respuestas de opción múltiple
  status             SubmissionStatus @default(PENDING)
  score              Int?
  feedback           String?          @db.Text
  submittedAt        DateTime?
  gradedAt           DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  assignment         Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments           Comment[]
  
  @@unique([assignmentId, userId])
  @@index([assignmentId])
  @@index([userId])
  @@index([status])
}

model Rubric {
  id           String   @id @default(cuid())
  assignmentId String
  criteriaData Json     // Array de criterios con nombre, descripción, puntos
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@index([assignmentId])
}

model Comment {
  id           String   @id @default(cuid())
  submissionId String
  userId       String
  content      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([submissionId])
  @@index([userId])
}

enum NotificationType {
  ASSIGNMENT_CREATED
  SUBMISSION_GRADED
  COMMENT_ADDED
  COURSE_COMPLETED
  NEW_ENROLLMENT
  QUIZ_GRADED
  FORUM_REPLY
  FORUM_SOLUTION_MARKED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  relatedId String?          // ID del curso, assignment, etc.
  link      String?          // URL a donde redirigir
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Learning Paths Models
model LearningPath {
  id               String                    @id @default(cuid())
  title            String
  description      String                    @db.Text
  thumbnail        String?
  instructorId     String
  level            String?                   // Beginner, Intermediate, Advanced
  estimatedHours   Int?                      // Total estimated hours to complete
  isPublished      Boolean                   @default(false)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  
  instructor       User                      @relation("LearningPathInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  courses          LearningPathCourse[]
  enrollments      LearningPathEnrollment[]
  certificates     LearningPathCertificate[]
  
  @@index([instructorId])
  @@index([isPublished])
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  courseId       String
  order          Int          // Order of course in the learning path
  isRequired     Boolean      @default(true) // Is this course required or optional?
  createdAt      DateTime     @default(now())
  
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([learningPathId, courseId])
  @@unique([learningPathId, order])
  @@index([learningPathId])
  @@index([courseId])
}

model LearningPathEnrollment {
  id             String       @id @default(cuid())
  userId         String
  learningPathId String
  enrolledAt     DateTime     @default(now())
  completedAt    DateTime?
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  
  @@unique([userId, learningPathId])
  @@index([userId])
  @@index([learningPathId])
}

model LearningPathCertificate {
  id              String       @id @default(cuid())
  certificateCode String       @unique
  userId          String
  learningPathId  String
  issuedAt        DateTime     @default(now())
  createdAt       DateTime     @default(now())
  
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath    LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  
  @@unique([userId, learningPathId])
  @@index([userId])
  @@index([learningPathId])
  @@index([certificateCode])
}

// Forum Discussion Models
model ForumThread {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  authorId    String
  courseId    String
  moduleId    String?
  lessonId    String?
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course   Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module   Module?       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lesson   Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  replies  ForumReply[]
  votes    ForumVote[]

  @@index([authorId])
  @@index([courseId])
  @@index([moduleId])
  @@index([lessonId])
  @@index([createdAt])
}

model ForumReply {
  id                 String   @id @default(cuid())
  content            String   @db.Text
  authorId           String
  threadId           String
  parentReplyId      String?
  isMarkedAsSolution Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  thread       ForumThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parentReply  ForumReply?   @relation("ReplyToReply", fields: [parentReplyId], references: [id], onDelete: Cascade)
  childReplies ForumReply[]  @relation("ReplyToReply")
  votes        ForumVote[]

  @@index([authorId])
  @@index([threadId])
  @@index([parentReplyId])
  @@index([createdAt])
}

model ForumVote {
  id        String   @id @default(cuid())
  userId    String
  threadId  String?
  replyId   String?
  voteType  String   // "upvote" or "downvote"
  createdAt DateTime @default(now())

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread ForumThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  reply  ForumReply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId])
  @@unique([userId, replyId])
  @@index([userId])
  @@index([threadId])
  @@index([replyId])
}
